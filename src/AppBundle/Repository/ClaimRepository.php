<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Claim;
use AppBundle\Model\Repository\AbstractEntityRepository;
use Doctrine\ORM\QueryBuilder as Builder;

/**
 * ClaimRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClaimRepository extends  AbstractEntityRepository
{
    /**
     * @var array
     */
    protected $columnMaps = [
         0 => 'claim.id',
        'categoryTitle' => 'categoryTitle',
        'accountUsername' => 'account.username',
        'claimTitle' => 'claim.title',
        'claimDescription' => 'claim.description',
        'claimIsService' => 'claim.isService'
    ];
    /**
     * @var array
     */
    protected $filtrableFields = [
        'categoryName' => 'empty',
        'username' => 'empty',
        'title' => 'empty',
        'description' => 'empty',
        'isService' => 'empty',

    ];
    public function findRecent($max)
    {
         return $this->createQueryBuilder('c')
                 ->orderBy('c.createdAt', 'DESC')
                 ->getQuery()
                 ->setMaxResults($max)
                 ->getResult();
    }

    /**
     * @param Builder $qb
     * @param $data
     * @param bool $countOnly
     * @return mixed|void
     */
    protected function populateQb(Builder $qb, $data, $countOnly = false)
    {
        $qb
            ->select($countOnly ? 'COUNT(claim)' : 'claim, category, account')
            ->from(Claim::class, 'claim')
            ->join('claim.category','category')
            ->join('claim.account', 'account')
            ;


        if(isset($data['categoryTitle'])) {
            $qb
                ->where('category.title LIKE :categoryTitle')
                ->setParameter('categoryTitle', $data['categoryTitle'].'%');
        }
        if(isset($data['accountUsername'])) {
            $qb
                ->andWhere('account.username LIKE :username')
                ->setParameter('username',$data['accountUsername'].'%')
                ;
        }
        // Filter upon inner attribute
        if(isset($data['claimTitle'])) {
            $qb
                ->andWhere('claim.title LIKE :title')
                ->setParameter('title','%'.$data['claimTitle'].'%')
            ;
        }

        if(isset($data['claimDescription'])) {
            $qb
                ->andWhere('claim.description LIKE :description')
                ->setParameter('description','%'.$data['claimDescription'].'%')
            ;
        }

        if(isset($data['claimIsService'])&&!empty($data['claimIsService'])) {
            $isService = !!$data['claimIsService'];
            $qb
                ->andWhere('claim.isService=:isService')
                ->setParameter('isService', $isService)
                ;
        }
    }


}
